#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ВыполнитьТестыНаСервере() Экспорт
	
	Если ТестироватьСоединениеЧерезПрокси Тогда
		Тест_СоединениеЧерезПрокси();
	КонецЕсли;
	Тест_ПараметрыЗаписиJson();
	Тест_URLБезСхемы();
	Тест_ПередачаПараметровВСтрокуЗапроса();
	Тест_ПередачаПараметровВСтрокуЗапросаКомбинированный();	
	Тест_РезультатКакJsonGet();
	Тест_РезультатКакJsonPost();
	Тест_РезультатКакДвоичныеДанные();
	Тест_РезультатКакТекст();
	Тест_ПередачаПроизвольныхЗаголовков();	
	Тест_ОтправкаДанныхФормы();
	Тест_ОтправкаJson();
	Тест_Таймаут();
	Тест_BasicAuth();
	Тест_DigestAuth();
	Тест_ПолучитьGZip();                                   
	Тест_GetJson();
	Тест_PostJson();
	Тест_GetJsonСтруктура();
	Тест_PutJson();
	Тест_DeleteJson();
	Тест_GetУспешнийРедиректОтносительныйАдрес();
	Тест_GetУспешнийРедиректАбсолютныйАдрес();
	Тест_GetЗацикленныйРедирект();
	Тест_GetОтключенныйРедирект();
	Тест_Ошибка404();
	Тест_РаботаССессиями();	
	Тест_Options();
	Тест_Head();
	Тест_Delete();
	Тест_Patch();
	Тест_УстановкаCookies();
	Тест_ОтправитьCookies();
	Тест_POST_MultipartFormData_ТолькоФайл();
	Тест_POST_MultipartFormData_ФайлыИПоляФормы();
	
КонецПроцедуры

#Область Тесты

Процедура Тест_СоединениеЧерезПрокси()
	
	Прокси = Новый ИнтернетПрокси;
	Прокси.Установить("http", "192.168.1.51", 8192);
	КоннекторHTTP.GetJson("http://httpbin.org/headers",, Новый Структура("Прокси", Прокси));
	
	ТестПройден("Тест_СоединениеЧерезПрокси");

КонецПроцедуры

Процедура Тест_ПараметрыЗаписиJson()
	
	ПараметрыЗаписиJSON = Новый Структура("ПереносСтрок", ПереносСтрокJSON.Нет);
	Json = Новый Структура;
	Json.Вставить("field", "value");
	Json.Вставить("field2", "value2");
	Результат = КоннекторHTTP.PostJson("http://httpbin.org/anything", Json, Новый Структура("ПараметрыЗаписиJSON", ПараметрыЗаписиJSON));
	УтверждениеВерно(Результат["data"], "{""field"":""value"",""field2"":""value2""}");
	
	ТестПройден("Тест_ПараметрыЗаписиJson");
	
КонецПроцедуры

Процедура Тест_URLБезСхемы()
	
	Результат = КоннекторHTTP.GetJson("httpbin.org/get");
	УтверждениеВерно(Результат["url"], "http://httpbin.org/get");
	
	ТестПройден("Тест_URLБезСхемы");
	
КонецПроцедуры

Процедура Тест_ПередачаПараметровВСтрокуЗапроса()
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("name", СтрРазделить("Иванов,Петров", ","));
	ПараметрыЗапроса.Вставить("salary", Формат(100000, "ЧГ="));
	
	Ответ = КоннекторHTTP.Get("https://httpbin.org/anything/params", ПараметрыЗапроса);	
	Результат = КоннекторHTTP.КакJson(Ответ);
	
	УтверждениеВерно(Ответ.URL, "https://httpbin.org/anything/params?name=%D0%98%D0%B2%D0%B0%D0%BD%D0%BE%D0%B2&name=%D0%9F%D0%B5%D1%82%D1%80%D0%BE%D0%B2&salary=100000");
	УтверждениеВерно(Результат["url"], "https://httpbin.org/anything/params?name=Иванов&name=Петров&salary=100000");
	УтверждениеВерно(Результат["args"]["salary"], "100000");
	УтверждениеВерно(СтрСоединить(Результат["args"]["name"], ","), "Иванов,Петров");
	
	ТестПройден("Тест_ПередачаПараметровВСтрокуЗапроса");
	
КонецПроцедуры

Процедура Тест_ПередачаПараметровВСтрокуЗапросаКомбинированный()
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("name", СтрРазделить("Иванов,Петров", ","));
	ПараметрыЗапроса.Вставить("salary", Формат(100000, "ЧГ="));
	
	Результат = КоннекторHTTP.GetJson("https://httpbin.org/anything/params?post=Программист", ПараметрыЗапроса);	
	
	УтверждениеВерно(Результат["args"]["salary"], "100000");
	УтверждениеВерно(Результат["args"]["post"], "Программист");
	УтверждениеВерно(СтрСоединить(Результат["args"]["name"], ","), "Иванов,Петров");
	
	ТестПройден("Тест_ПередачаПараметровВСтрокуЗапросаКомбинированный");
	
КонецПроцедуры

Процедура Тест_РезультатКакJsonGet()
	
	Результат = КоннекторHTTP.GetJson("http://httpbin.org/get");
	УтверждениеВерно(Результат["url"], "http://httpbin.org/get");
	
	ТестПройден("Тест_РезультатКакJsonGet");
	
КонецПроцедуры

Процедура Тест_РезультатКакJsonPost()
	
	Результат = КоннекторHTTP.КакJson(КоннекторHTTP.Post(("http://httpbin.org/post")));
	УтверждениеВерно(Результат["url"], "http://httpbin.org/post");
	
	ТестПройден("Тест_РезультатКакJsonPost");
	
КонецПроцедуры

Процедура Тест_РезультатКакДвоичныеДанные()
	
	Результат = КоннекторHTTP.КакДвоичныеДанные(КоннекторHTTP.Get("http://httpbin.org/image/png"));
	
	УтверждениеВерно(ТипЗнч(Результат), Тип("ДвоичныеДанные"));
	УтверждениеВерно(ПосчитатьMD5(Результат), "5cca6069f68fbf739fce37e0963f21e7");
	
	ТестПройден("Тест_РезультатКакДвоичныеДанные");
	
КонецПроцедуры

Процедура Тест_РезультатКакТекст()
	
	Результат = КоннекторHTTP.КакТекст(КоннекторHTTP.Get("http://httpbin.org/encoding/utf8"));
	УтверждениеВерно(СтрНайти(Результат, "Зарегистрируйтесь сейчас на Десятую Международную"), 3931);
	
	ТестПройден("Тест_РезультатКакТекст");
	
КонецПроцедуры

Процедура Тест_ПередачаПроизвольныхЗаголовков()
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("X-My-Header", "Hello!!!");
	Результат = КоннекторHTTP.GetJson("http://httpbin.org/headers",, Новый Структура("Заголовки", Заголовки));
	
	УтверждениеВерно(Результат["headers"]["X-My-Header"], "Hello!!!");
	
	ТестПройден("Тест_ПередачаПроизвольныхЗаголовков");
	
КонецПроцедуры

Процедура Тест_ОтправкаДанныхФормы()
	
	Данные = Новый Структура;
	Данные.Вставить("comments", "Постучать в дверь");
	Данные.Вставить("custemail", "vasya@mail.ru");
	Данные.Вставить("custname", "Вася");
	Данные.Вставить("custtel", "112");
	Данные.Вставить("delivery", "20:20");
	Данные.Вставить("size", "medium");
	Данные.Вставить("topping", СтрРазделить("bacon,mushroom", ","));
	
	Ответ = КоннекторHTTP.Post("http://httpbin.org/post", Данные);
	УтверждениеВерно(Ответ.URL, "http://httpbin.org/post");
	Результат = КоннекторHTTP.КакJson(Ответ);
	УтверждениеВерно(Результат["form"]["size"], "medium");
	УтверждениеВерно(Результат["form"]["comments"], "Постучать в дверь");
	УтверждениеВерно(Результат["form"]["custemail"], "vasya@mail.ru");
	УтверждениеВерно(Результат["form"]["delivery"], "20:20");
	УтверждениеВерно(Результат["form"]["custtel"], "112");	

	ТестПройден("Тест_ОтправкаДанныхФормы");
	
КонецПроцедуры

Процедура Тест_ОтправкаJson()
	
	Json = Новый Структура;
	Json.Вставить("Сотрудник", "Иванов Иван Петрович");
	Json.Вставить("Должность", "Разнорабочий");
	
	Результат = КоннекторHTTP.PostJson("http://httpbin.org/post", Json);
	
	УтверждениеВерно(Результат["json"]["Сотрудник"], "Иванов Иван Петрович");
	УтверждениеВерно(Результат["json"]["Должность"], "Разнорабочий");
	
	Результат = КоннекторHTTP.PutJson("http://httpbin.org/put", Json);
	УтверждениеВерно(Результат["json"]["Сотрудник"], "Иванов Иван Петрович");
	УтверждениеВерно(Результат["json"]["Должность"], "Разнорабочий");
	
	ТестПройден("Тест_ОтправкаJson");
	
КонецПроцедуры

Процедура Тест_Таймаут()
	
	Попытка
		Ответ = КоннекторHTTP.Get("https://httpbin.org/delay/10",, Новый Структура("Таймаут", 1));
	Исключение
		ВерноеИсключение(ИнформацияОбОшибке(), СтрРазделить("Превышено время ожидания|Timeout exceeded", "|"));
	КонецПопытки;
	
	ТестПройден("Тест_Таймаут");
	
КонецПроцедуры

Процедура Тест_ПолучитьGZip()
	
	Результат = КоннекторHTTP.GetJson("http://httpbin.org/gzip");
	УтверждениеВерно(Результат["gzipped"], Истина);
	
	ТестПройден("Тест_ПолучитьGZip");
	
КонецПроцедуры
	
Процедура Тест_BasicAuth()
	
	Результат = КоннекторHTTP.GetJson("https://user:pass@httpbin.org/basic-auth/user/pass");
	УтверждениеВерно(Результат["authenticated"], Истина);
	УтверждениеВерно(Результат["user"], "user");

	Аутентификация = Новый Структура("Пользователь, Пароль", "user", "pass");
	Результат = КоннекторHTTP.GetJson(
		"https://httpbin.org/basic-auth/user/pass",,
		Новый Структура("Аутентификация", Аутентификация));
	УтверждениеВерно(Результат["authenticated"], Истина);
	УтверждениеВерно(Результат["user"], "user");

	Аутентификация = Новый Структура("Пользователь, Пароль, Тип", "user", "pass", "Basic");
	Результат = КоннекторHTTP.GetJson(
		"https://httpbin.org/basic-auth/user/pass",,
		Новый Структура("Аутентификация", Аутентификация));
	УтверждениеВерно(Результат["authenticated"], Истина);
	УтверждениеВерно(Результат["user"], "user");

	ТестПройден("Тест_BasicAuth");
	
КонецПроцедуры

Процедура Тест_DigestAuth()
			
	Аутентификация = Новый Структура("Пользователь, Пароль, Тип", "user", "pass", "Digest");
	Результат = КоннекторHTTP.GetJson(
		"https://httpbin.org/digest-auth/auth/user/pass",,
		Новый Структура("Аутентификация", Аутентификация));
	УтверждениеВерно(Результат["authenticated"], Истина);
	УтверждениеВерно(Результат["user"], "user");
	
	Аутентификация = Новый Структура("Пользователь, Пароль, Тип", "guest", "guest", "Digest");
	Результат = КоннекторHTTP.Get(
		"https://jigsaw.w3.org/HTTP/Digest/",,
		Новый Структура("Аутентификация", Аутентификация));		
	УтверждениеВерно(Результат.КодСостояния, 200);

	ТестПройден("Тест_DigestAuth");
		
КонецПроцедуры

Процедура Тест_GetJson()
	
	Результат = КоннекторHTTP.GetJson("http://httpbin.org/get");
	УтверждениеВерно(Результат["url"], "http://httpbin.org/get");
	
	ТестПройден("Тест_GetJson");
	
КонецПроцедуры

Процедура Тест_GetJsonСтруктура()
	
	ПараметрыПреобразованияJSON = Новый Структура("ПрочитатьВСоответствие", Ложь);
	Результат = КоннекторHTTP.GetJson("http://httpbin.org/json",, Новый Структура("ПараметрыПреобразованияJSON", ПараметрыПреобразованияJSON));
	УтверждениеВерно(Результат.slideshow.author, "Yours Truly");
	УтверждениеВерно(Результат.slideshow.date, "date of publication");
	УтверждениеВерно(Результат.slideshow.slides.Количество(), 2);
	УтверждениеВерно(Результат.slideshow.title, "Sample Slide Show");
	
	ТестПройден("Тест_GetJsonСтруктура");
	
КонецПроцедуры

Процедура Тест_PostJson()
	
	ПараметрыПреобразованияJSON = Новый Структура;
	ПараметрыПреобразованияJSON.Вставить("ИменаСвойствСоЗначениямиДата", "Дата");
	
	Json = Новый Структура;
	Json.Вставить("Дата", '20190121002400');
	Json.Вставить("Число", 5);
	Json.Вставить("Булево", True);
	Json.Вставить("Строка", "Привет");
		
	Результат = КоннекторHTTP.PostJson(
		"http://httpbin.org/post", 
		Json, 
		Новый Структура("ПараметрыПреобразованияJSON", ПараметрыПреобразованияJSON));
	УтверждениеВерно(Результат["url"], "http://httpbin.org/post");
	УтверждениеВерно(Результат["json"]["Дата"], '20190121002400');
	УтверждениеВерно(Результат["json"]["Число"], 5);
	УтверждениеВерно(Результат["json"]["Булево"], True);
	УтверждениеВерно(Результат["json"]["Строка"], "Привет");

	ТестПройден("Тест_PostJson");
	
КонецПроцедуры

Процедура Тест_PutJson()
	
	Результат = КоннекторHTTP.PutJson("http://httpbin.org/put", Новый Структура("Название", "КоннекторHTTP"));
	УтверждениеВерно(Результат["url"], "http://httpbin.org/put");
	УтверждениеВерно(Результат["json"]["Название"], "КоннекторHTTP");
	
	ТестПройден("Тест_PutJson");
	
КонецПроцедуры

Процедура Тест_DeleteJson()
	
	Результат = КоннекторHTTP.DeleteJson("http://httpbin.org/delete", Новый Структура("Название", "КоннекторHTTP"));
	УтверждениеВерно(Результат["url"], "http://httpbin.org/delete");
	УтверждениеВерно(Результат["json"]["Название"], "КоннекторHTTP");
	
	ТестПройден("Тест_DeleteJson");
	
КонецПроцедуры

Процедура Тест_GetУспешнийРедиректОтносительныйАдрес()
	
	Ответ = КоннекторHTTP.Get("http://httpbin.org/relative-redirect/6");
	Результат = КоннекторHTTP.КакJson(Ответ);
	
	УтверждениеВерно(Ответ.КодСостояния, 200);
	УтверждениеВерно(Результат["url"], "http://httpbin.org/get");
	
	ТестПройден("Тест_GetУспешнийРедиректОтносительныйАдрес");
	
КонецПроцедуры

Процедура Тест_GetУспешнийРедиректАбсолютныйАдрес()
	
	Ответ = КоннекторHTTP.Get("http://httpbin.org/absolute-redirect/6");
	Результат = КоннекторHTTP.КакJson(Ответ);
	
	УтверждениеВерно(Ответ.КодСостояния, 200);
	УтверждениеВерно(Результат["url"], "http://httpbin.org/get");
	
	ТестПройден("Тест_GetУспешнийРедиректАбсолютныйАдрес");
	
КонецПроцедуры

Процедура Тест_GetЗацикленныйРедирект()
	
	Попытка
		Результат = КоннекторHTTP.КакJson(КоннекторHTTP.Get("http://httpbin.org/redirect/31"));
	Исключение
		ВерноеИсключение(ИнформацияОбОшибке(), "СлишкомМногоПеренаправлений");
	КонецПопытки;
	
	ТестПройден("Тест_GetЗацикленныйРедирект");
	
КонецПроцедуры

Процедура Тест_GetОтключенныйРедирект()
	
	Параметры = Новый Структура("РазрешитьПеренаправление", Ложь);	
	Ответ = КоннекторHTTP.Get("http://httpbin.org/redirect-to?url=http%3A%2F%2Fhttpbin.org%2Fget&status_code=307",, Параметры);
	
	УтверждениеВерно(Ответ.КодСостояния, 307);
	
	ТестПройден("Тест_GetОтключенныйРедирект");
	
КонецПроцедуры

Процедура Тест_Ошибка404()
	
	Ответ = КоннекторHTTP.Get("http://httpbin.org/status/404");
	
	УтверждениеВерно(Ответ.КодСостояния, 404);
	
	ТестПройден("Тест_Ошибка404");
	
КонецПроцедуры

Процедура Тест_РаботаССессиями()
	
	Сессия = КоннекторHTTP.СоздатьСессию();
	Ответ = КоннекторHTTP.ВызватьМетодВСеансе(Сессия, "GET", "https://releases.1c.ru/total");
	
	Данные = Новый Структура;
	Данные.Вставить("execution", ИзвлечьExecution(Ответ));
	Данные.Вставить("username", Логин); 	
	Данные.Вставить("password", Пароль);
	Данные.Вставить("_eventId", "submit");
	Данные.Вставить("geolocation", "");
	Данные.Вставить("submit", "Войти");
	Данные.Вставить("rememberMe", "on");
	
	Ответ = КоннекторHTTP.ВызватьМетодВСеансе(Сессия, "POST", Ответ.URL, Новый Структура("Данные", Данные));
	
	УтверждениеВерно(Ответ.URL, "https://releases.1c.ru/total");
	УтверждениеВерно(Ответ.КодСостояния, 200);
	
	ТестПройден("Тест_РаботаССессиями");
	
КонецПроцедуры

Процедура Тест_Options()
	
	Ответ = КоннекторHTTP.Options("http://httpbin.org/anything");
	
	УтверждениеВерно(Ответ.КодСостояния, 200);
	
	ТестПройден("Тест_Options");
	
КонецПроцедуры

Процедура Тест_Head()
	
	Ответ = КоннекторHTTP.Head("http://httpbin.org/anything");
	
	УтверждениеВерно(Ответ.КодСостояния, 200);
	
	ТестПройден("Тест_Head");
	
КонецПроцедуры

Процедура Тест_Delete()
	
	Ответ = КоннекторHTTP.Delete("http://httpbin.org/delete");
	
	УтверждениеВерно(Ответ.КодСостояния, 200);
	
	ТестПройден("Тест_Delete");
	
КонецПроцедуры

Процедура Тест_Patch()
	
	Ответ = КоннекторHTTP.Patch("http://httpbin.org/patch");
	
	УтверждениеВерно(Ответ.КодСостояния, 200);
	
	ТестПройден("Тест_Patch");
	
КонецПроцедуры

Процедура Тест_УстановкаCookies()
	
	Результат = КоннекторHTTP.GetJson("http://httpbin.org/cookies/set/PHPSESSID/72a68cc1e55a4fbb9c0b8dbbeb49ca4f");
	
	УтверждениеВерно(Результат["cookies"]["PHPSESSID"], "72a68cc1e55a4fbb9c0b8dbbeb49ca4f");
	
	ТестПройден("Тест_УстановкаCookies");
	
КонецПроцедуры

Процедура Тест_ОтправитьCookies()
	
	Cookies = Новый Массив;
	Cookies.Добавить(Новый Структура("Наименование,Значение", "k1", Строка(Новый УникальныйИдентификатор)));
	Cookies.Добавить(Новый Структура("Наименование,Значение", "k2", Строка(Новый УникальныйИдентификатор)));
	Ответ = КоннекторHTTP.Get("http://httpbin.org/cookies",, Новый Структура("Cookies", Cookies));
	Результат = КоннекторHTTP.КакJson(Ответ);
	
	УтверждениеВерно(Результат["cookies"]["k1"], Cookies[0].Значение);
	УтверждениеВерно(Результат["cookies"]["k2"], Cookies[1].Значение);
	
	ТестПройден("Тест_ОтправитьCookies");
	
КонецПроцедуры

Процедура Тест_POST_MultipartFormData_ТолькоФайл()
	
	Файлы = Новый Структура;
	Файлы.Вставить("Имя", "f1");
	Файлы.Вставить("ИмяФайла", "file1.txt");
	Файлы.Вставить("Данные", Base64Значение("0J/RgNC40LLQtdGCINCc0LjRgCE="));
	Файлы.Вставить("Тип", "text/plain");
	
	Результат = КоннекторHTTP.PostJson("https://httpbin.org/post",, Новый Структура("Файлы", Файлы));
	
	УтверждениеВерно(Результат["files"]["f1"], "Привет Мир!");
	
	ТестПройден("Тест_POST_MultipartFormData_ТолькоФайл");
	
КонецПроцедуры

Процедура Тест_POST_MultipartFormData_ФайлыИПоляФормы()
	
	Файлы = Новый Массив;
	Файлы.Добавить(Новый Структура("Имя,Данные,ИмяФайла", "f1", Base64Значение("ZmlsZTE="), "file1.txt"));
	Файлы.Добавить(Новый Структура("Имя,Данные,ИмяФайла", "f2", Base64Значение("ZmlsZTI="), "file2.txt"));
	
	Данные = Новый Структура("field1,field2", "value1", "Значение2");
	
	Результат = КоннекторHTTP.PostJson("https://httpbin.org/post",, Новый Структура("Файлы,Данные", Файлы, Данные));
	
	УтверждениеВерно(Результат["files"]["f1"], "file1");
	УтверждениеВерно(Результат["files"]["f2"], "file2");
	УтверждениеВерно(Результат["form"]["field1"], "value1");
	УтверждениеВерно(Результат["form"]["field2"], "Значение2");
	
	ТестПройден("Тест_POST_MultipartFormData_ФайлыИПоляФормы");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИзвлечьExecution(Ответ)
	
	HTML = КоннекторHTTP.КакТекст(Ответ);
	
	Начало = СтрНайти(HTML, "name=""execution""");
	Конец = СтрНайти(HTML, ">", НаправлениеПоиска.СНачала, Начало);
	КороткаяСтрока = Сред(HTML, Начало, Конец - Начало);
	
	Начало = СтрНайти(КороткаяСтрока, "value=""") + СтрДлина("value=""");
	Конец = СтрНайти(КороткаяСтрока, """", НаправлениеПоиска.СНачала, Начало); 
	
	Возврат Сред(КороткаяСтрока, Начало, Конец - Начало);
	
КонецФункции

Функция ПосчитатьMD5(Данные)
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеширование.Добавить(Данные);
	
	Возврат НРег(ПолучитьHexСтрокуИзДвоичныхДанных(Хеширование.ХешСумма));
	
КонецФункции

Процедура УтверждениеВерно(ЛевоеЗначение, ПравоеЗначение, Пояснение = "")
	
	Если ЛевоеЗначение <> ПравоеЗначение Тогда
		ВызватьИсключение(СтрШаблон("<%1> не равно <%2>: %3", ЛевоеЗначение, ПравоеЗначение, Пояснение));
	КонецЕсли;
	
КонецПроцедуры

Процедура ВерноеИсключение(ИнформацияОбОшибке, ОжидаемоеИсключение)
	
	ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Если ТипЗнч(ОжидаемоеИсключение) = Тип("Массив") Тогда
		ТекстНайден = Ложь;
		Для Каждого Элемент Из ОжидаемоеИсключение Цикл
			Если СтрНайти(ТекстИсключения, Элемент) Тогда
				ТекстНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ТекстНайден Тогда
			ВызватьИсключение(ТекстИсключения);
		КонецЕсли		
	Иначе
		Если Не СтрНайти(ТекстИсключения, ОжидаемоеИсключение) Тогда
			ВызватьИсключение(ТекстИсключения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТестПройден(Тест)
	
	Сообщить(СтрШаблон("[OK] %1", Тест));
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область Совместимость82

Функция СтрНачинаетсяС(ГдеИскать, ЧтоИскать)

	РазмерИскомого = СтрДлина(ЧтоИскать);
	Возврат ЧтоИскать = Лев(ГдеИскать, РазмерИскомого);

КонецФункции

Функция СтрЗаканчиваетсяНа(ГдеИскать, ЧтоИскать)

   	РазмерИскомого = СтрДлина(ЧтоИскать);
	Возврат ЧтоИскать = Прав(ГдеИскать, РазмерИскомого);

КонецФункции

Функция СтрШаблон(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	
	Возврат СтрокаПодстановки;
КонецФункции

Функция СтрРазделить(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтрСоединить(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Если Индекс > 0 Тогда
			Результат = Результат + Разделитель;
		КонецЕсли;
		
		Результат = Результат + Подстрока;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СтрНайти(ГдеИскать, ЧтоИскать)
	Возврат Найти(ГдеИскать, ЧтоИскать);
КонецФункции

#КонецОбласти